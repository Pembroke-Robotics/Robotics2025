#include <kipr/wombat.h>

int arm = 2;
int claw = 3;
int left = 1;
int right = 0;

int close = 8000;

int up = 300;
int down = 130;
int middle = 228;


void forward(int speed, int time);
void wait();
void waits(int time);

void armUp(int time);
void armUpT(int ticks);
void armDown(int time);
void armDownT(int ticks);
void armGround();
void armWait();
void armClose(int ticks);
void armOpen(int ticks);

void clear();
void gmpcMove(int counter);
int main()
{
    clear();
    wait();
    armOpen(-close);
    clear();
    armClose(close);
    clear();
    armOpen(-close);
    clear();
    armClose(close);
    gmpcMove(1000);
    armDown(2000);
    clear();
    armWait(1000);
    clear();
    
    armUpT(up);
    armWait();
    armDownT(middle);
    armWait();
    armDownT(down);
    
    
    
    



    return 0;
}

void forward(int speed, int time)
{

    motor(left, speed);
    motor(right, speed);
    msleep(time);

    wait();

}

void wait()
{
    motor(left, 0);
    motor(right, 0);
    msleep(500);
}
void waits(int time)
{
    motor(left, 0);
    motor(right, 0);
    msleep(time);
}   
void armUp(int time)
{
    motor(arm, 10);
    msleep(time);
    armWait();
}
void armUpT(int ticks)
{
    while(gmpc(arm) < ticks)
    {
        motor(arm, 2);
    }
}
void armDown(int time)
{
    motor(arm, -10);
    msleep(time);
    armWait();
}
void armDownT(int ticks)
{
    while(gmpc(arm) > ticks)
    {
        motor(arm, -2);
    }
}
void armGround()
{
    if (gmpc(arm) == gmpc(arm))
    {
        motor(arm, -1);
    }
}
void armWait()
{
    motor(arm, 0);
    msleep(100);
}
void clear()
{
    cmpc(0);
    cmpc(1);
    cmpc(2);
    cmpc(3);
}
void gmpcMove(int counter)
{
  while(gmpc(0) < counter)
  {
  while((gmpc(0) == gmpc(1)) && (gmpc(1) <counter))
  {
    motor(0, 50);
    motor(1, 50);
  }
  while((gmpc(0) < counter) && (gmpc(0) < gmpc(1)))
  {
    motor(0, 50);
    motor(1, 45);
  }
  while((gmpc(1) < counter) && (gmpc(1) < gmpc(0)))
  {
    motor(0, 45);
    motor(1, 50);
  }
  }
motor(0, 0);
motor(1, 0);
}
void armClose(int ticks)
{
    while(gmpc(claw) < ticks)
    {
        motor(claw, 20);
    }
}
void armOpen(int ticks)
{
    while(gmpc(claw) > ticks)
    {
        motor(claw, -20);
    }
}
